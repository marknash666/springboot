package org.fisco.bcos.temp;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class VehicleQuery extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETREMARK = "getRemark";

    public static final String FUNC_GETNUMSOFRECORDS = "getNumsOfRecords";

    public static final String FUNC_GETINFO = "getInfo";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_UPDATEVEHICLEMAINTENANCE = "updateVehicleMaintenance";

    public static final String FUNC_MANUFACTUREINIT = "ManufactureInit";

    public static final String FUNC_ADDAPPROVEDMAINTENANCESHOP = "addApprovedMaintenanceShop";

    public static final String FUNC_GETVEHICLEMANUFACTURINGINFO = "getVehicleManufacturingInfo";

    @Deprecated
    protected VehicleQuery(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VehicleQuery(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VehicleQuery(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VehicleQuery(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getRemark(String VIN, BigInteger index) {
        final Function function = new Function(FUNC_GETREMARK, 
                Arrays.<Type>asList(new Utf8String(VIN),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getNumsOfRecords(String VIN) {
        final Function function = new Function(FUNC_GETNUMSOFRECORDS,
                Arrays.<Type>asList(new Utf8String(VIN)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getInfo(String VIN, BigInteger index) {
        final Function function = new Function(FUNC_GETINFO,
                Arrays.<Type>asList(new Utf8String(VIN),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAddress(String VIN, BigInteger index) {
        final Function function = new Function(FUNC_GETADDRESS,
                Arrays.<Type>asList(new Utf8String(VIN),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateVehicleMaintenance(String VIN, String remarks, String info) {
        final Function function = new Function(
                FUNC_UPDATEVEHICLEMAINTENANCE,
                Arrays.<Type>asList(new Utf8String(VIN),
                new Utf8String(remarks),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateVehicleMaintenance(String VIN, String remarks, String info, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEVEHICLEMAINTENANCE,
                Arrays.<Type>asList(new Utf8String(VIN),
                new Utf8String(remarks),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> ManufactureInit(String VIN, String originInfo) {
        final Function function = new Function(
                FUNC_MANUFACTUREINIT,
                Arrays.<Type>asList(new Utf8String(VIN),
                new Utf8String(originInfo)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void ManufactureInit(String VIN, String originInfo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_MANUFACTUREINIT,
                Arrays.<Type>asList(new Utf8String(VIN),
                new Utf8String(originInfo)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> addApprovedMaintenanceShop(String approvedAddress) {
        final Function function = new Function(
                FUNC_ADDAPPROVEDMAINTENANCESHOP,
                Arrays.<Type>asList(new Address(approvedAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addApprovedMaintenanceShop(String approvedAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDAPPROVEDMAINTENANCESHOP,
                Arrays.<Type>asList(new Address(approvedAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<String> getVehicleManufacturingInfo(String VIN) {
        final Function function = new Function(FUNC_GETVEHICLEMANUFACTURINGINFO,
                Arrays.<Type>asList(new Utf8String(VIN)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static VehicleQuery load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VehicleQuery(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VehicleQuery load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VehicleQuery(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VehicleQuery load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VehicleQuery(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VehicleQuery load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VehicleQuery(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VehicleQuery> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VehicleQuery.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VehicleQuery> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VehicleQuery.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<VehicleQuery> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VehicleQuery.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VehicleQuery> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VehicleQuery.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
